{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AWS MCP Servers","text":"<p>A suite of specialized MCP servers that help you get the most out of AWS, wherever you use MCP.</p>"},{"location":"#available-mcp-servers","title":"Available MCP Servers","text":""},{"location":"#core-mcp-server","title":"Core MCP Server","text":"<p>The Core MCP Server manages and coordinates other MCP servers in your environment, providing automatic installation, configuration, and management.</p> <p>Features:</p> <ul> <li>Automatic MCP Server Management</li> <li>Planning and guidance to orchestrate MCP Servers</li> <li>UVX Installation Support</li> <li>Centralized Configuration</li> </ul> <p>Learn more about the Core MCP Server</p>"},{"location":"#aws-documentation-mcp-server","title":"AWS Documentation MCP Server","text":"<p>The AWS Documentation MCP Server provides access to AWS documentation and best practices.</p> <p>Features:</p> <ul> <li>Search Documentation using the official AWS search API</li> <li>Get content recommendations for AWS documentation pages</li> <li>Convert documentation to markdown format</li> </ul> <p>Learn more about the AWS Documentation MCP Server</p>"},{"location":"#aws-cdk-mcp-server","title":"AWS CDK MCP Server","text":"<p>The CDK MCP Server provides AWS Cloud Development Kit (CDK) best practices, infrastructure as code patterns, and security compliance with CDK Nag.</p> <p>Features:</p> <ul> <li>CDK Best Practices</li> <li>CDK Nag Integration</li> <li>AWS Solutions Constructs</li> <li>GenAI CDK Constructs</li> </ul> <p>Learn more about the CDK MCP Server</p>"},{"location":"#amazon-nova-canvas-mcp-server","title":"Amazon Nova Canvas MCP Server","text":"<p>The Nova Canvas MCP Server enables AI assistants to generate images using Amazon Nova Canvas.</p> <p>Features:</p> <ul> <li>Text-based image generation</li> <li>Color-guided image generation</li> <li>Workspace integration</li> </ul> <p>Learn more about the Nova Canvas MCP Server</p>"},{"location":"#amazon-bedrock-knowledge-base-retrieval-mcp-server","title":"Amazon Bedrock Knowledge Base Retrieval MCP Server","text":"<p>The Bedrock Knowledge Base Retrieval MCP Server enables AI assistants to retrieve information from Amazon Bedrock Knowledge Bases.</p> <p>Features:</p> <ul> <li>Discover knowledge bases and their data sources</li> <li>Query knowledge bases with natural language</li> <li>Filter results by data source</li> <li>Rerank results</li> </ul> <p>Learn more about the Bedrock Knowledge Base Retrieval MCP Server</p>"},{"location":"#cost-analysis-mcp-server","title":"Cost Analysis MCP Server","text":"<p>The Cost Analysis MCP Server enables AI assistants to analyze the cost of AWS services.</p> <p>Features:</p> <ul> <li>Analyze and predict AWS costs before deployment</li> <li>Query cost data with natural language</li> <li>Generate cost reports and insights</li> </ul> <p>Learn more about the Cost Analysis MCP Server</p>"},{"location":"#aws-lambda-mcp-server","title":"AWS Lambda MCP Server","text":"<p>The AWS Lambda MCP Server enables AI assistants to select and run AWS Lambda functions as MCP tools.</p> <p>Features:</p> <ul> <li>Select and run AWS Lambda functions as MCP tools</li> <li>Tool names and descriptions are taken from the AWS Lambda function configuration</li> <li>Filter functions by name, tag, or both</li> <li>Use AWS credentials to invoke the Lambda functions</li> </ul> <p>Learn more about the AWS Lambda MCP Server</p>"},{"location":"#aws-diagram-mcp-server","title":"AWS Diagram MCP Server","text":"<p>This MCP server that seamlessly creates diagrams using the Python diagrams package DSL. This server allows you to generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.</p> <p>Features:</p> <p>The Diagrams MCP Server provides the following capabilities:</p> <ol> <li>Generate Diagrams: Create professional diagrams using Python code</li> <li>Multiple Diagram Types: Support for AWS architecture, sequence diagrams, flow charts, class diagrams, and more</li> <li>Customization: Customize diagram appearance, layout, and styling</li> <li>Security: Code scanning to ensure secure diagram generation</li> </ol> <p>Learn more about the AWS Diagram MCP Server</p>"},{"location":"#aws-terraform-mcp-server","title":"AWS Terraform MCP Server","text":"<p>The Terraform MCP Server enables AWS best practices, infrastructure as code patterns, and security compliance with Checkov.</p> <p>Features:</p> <p>The Terraform MCP Server provides the following capabilities:</p> <ul> <li>Terraform Best Practices</li> <li>Security-First Development Workflow</li> <li>Checkov Integration</li> <li>AWS and AWSCC Provider Documentation</li> <li>AWS-IA GenAI Modules</li> <li>Terraform Workflow Execution</li> </ul> <p>Learn more about the AWS Terraform MCP Server</p>"},{"location":"#installation-and-setup","title":"Installation and Setup","text":"<p>Please refer to the README files in each server's directory for specific installation instructions.</p>"},{"location":"#samples","title":"Samples","text":"<p>Please refer to the samples directory for examples of how to use the MCP Servers.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please see the contributing guidelines for more information.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>Before using an MCP Server, you should consider conducting your own independent assessment to ensure that your use would comply with your own specific security and quality control practices and standards, as well as the laws, rules, and regulations that govern you and your content.</p>"},{"location":"samples/","title":"AWS MCP Servers - Samples","text":"<p>This directory contains a collection of examples demonstrating how to use the AWS MCP Servers provided in the <code>src</code> directory. Each sample is organized into its own folder with relevant documentation and code.</p>"},{"location":"samples/#structure","title":"Structure","text":"<pre><code>samples/\n\u251c\u2500\u2500 project-name/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 (sample code and resources)\n</code></pre>"},{"location":"samples/#purpose","title":"Purpose","text":"<p>The samples in this directory provide:</p> <ul> <li>Working examples for each AWS MCP Server</li> <li>Integration patterns and best practices</li> <li>Code snippets for common use cases</li> <li>Step-by-step guides</li> </ul>"},{"location":"samples/#guidelines","title":"Guidelines","text":"<ul> <li>Each sample directory should focus on demonstrating one or more MCP servers</li> <li>All samples must include a README.md with clear instructions</li> <li>Samples should not introduce new MCP servers, but only demonstrate usage of existing ones</li> </ul>"},{"location":"samples/#available-samples","title":"Available Samples","text":""},{"location":"samples/#mcp-integration-with-kb","title":"MCP Integration with KB","text":"<p>A client that integrates with the Amazon Bedrock Knowledge Base MCP server. Code can be found in the mcp-integration-with-kb folder.</p>"},{"location":"samples/#coming-soon","title":"Coming Soon","text":""},{"location":"samples/#contributing","title":"Contributing","text":"<p>We welcome contributions of additional samples. Please ensure your sample follows the guidelines above and demonstrates real-world usage of the MCP servers.</p>"},{"location":"samples/mcp-integration-with-kb/","title":"MCP Integration with Amazon Bedrock Knowledge Bases","text":"<p>This repository outlines a basic implementation of the Model Context Protocol integration with Amazon Bedrock Knowledge Bases</p>"},{"location":"samples/mcp-integration-with-kb/#overview","title":"Overview","text":"<p>There are two parts to this implementation:</p> <ol> <li>The <code>user_interfaces/chat_bedrock_st.py</code> file, which handles the Streamlit/User Interface for the chatbot</li> <li>The <code>client_server.py</code> file, which handles the MCP client and server implementation</li> </ol> <p>The exact MCP server code leveraged can be found in the src/bedrock-kb-retrieval-mcp-server folder.</p>"},{"location":"samples/mcp-integration-with-kb/#architecture","title":"Architecture","text":""},{"location":"samples/mcp-integration-with-kb/#setup","title":"Setup","text":""},{"location":"samples/mcp-integration-with-kb/#prerequisites","title":"Prerequisites","text":"<ul> <li>The uv package manager</li> <li>AWS Account with Bedrock access and proper IAM permissions - Getting Started with Amazon Bedrock</li> <li>A Bedrock Knowledge Base</li> <li>For a quick reference Knowledge Base setup, check out the e2e RAG solution via CDK repo. This will set you up with everything you need - IAM roles, vector storage (either OpenSearch Serverless or Aurora PostgreSQL), and a fully configured Knowledge Base with sample data. The Knowledge Base is the only component you'll really need for this implementation.</li> </ul> <p>Note: Reranking for Amazon Bedrock is not supported in us-east-1. For more information about supported regions and models for reranking, see Supported Regions and models for reranking in Amazon Bedrock.</p>"},{"location":"samples/mcp-integration-with-kb/#installation","title":"Installation","text":"<ol> <li>Clone the repository.</li> </ol> <pre><code>git clone https://github.com/awslabs/mcp.git\n</code></pre> <ol> <li>Navigate to the sample directory and copy the .env.example file to .env and add your AWS credentials.</li> </ol> <pre><code>cd mcp/samples/mcp-integration-with-kb\ncp .env.example .env\n</code></pre> <ol> <li>Open two different terminals and install the dependencies in each.</li> </ol> <pre><code>uv sync\n</code></pre> <p>then activate the virtual environment</p> <p><pre><code>source .venv/bin/activate\n</code></pre> 4. In one of the terminals, run the FastAPI server</p> <pre><code>uvicorn clients.client_server:app --reload\n</code></pre> <ol> <li>In the other terminal, run the Streamlit app</li> </ol> <pre><code>streamlit run user_interfaces/chat_bedrock_st.py\n</code></pre> <ol> <li>The chatbot should now be running on http://localhost:8501/</li> </ol>"},{"location":"samples/mcp-integration-with-kb/#usage","title":"Usage","text":"<p>Grab your Bedrock Knowledge Base ID from the Bedrock Knowledge Base console and add it to the UI first on the left hand side menu.</p> <p>Ask away!</p>"},{"location":"samples/mcp-integration-with-kb/#troubleshooting","title":"Troubleshooting","text":"<p>Logs are available in the terminal where you ran the FastAPI server, outlining various steps and actions taken by the server.</p> <p>If you see an error about <code>boto3</code> or <code>streamlit</code> not being found, it is likely because you did not activate the virtual environment:</p> <pre><code>uv sync\nsource .venv/bin/activate\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/","title":"AWS Diagram MCP Server","text":"<p>Model Context Protocol (MCP) server for AWS Diagrams</p> <p>This MCP server that seamlessly creates diagrams using the Python diagrams package DSL. This server allows you to generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.</p> <p></p>"},{"location":"servers/aws-diagram-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install GraphViz https://www.graphviz.org/</li> </ol>"},{"location":"servers/aws-diagram-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-diagram-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.aws-diagram-mcp-server\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/aws-diagram-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.aws-diagram-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/aws-diagram-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/#features","title":"Features","text":"<p>The Diagrams MCP Server provides the following capabilities:</p> <ol> <li>Generate Diagrams: Create professional diagrams using Python code</li> <li>Multiple Diagram Types: Support for AWS architecture, sequence diagrams, flow charts, class diagrams, and more</li> <li>Customization: Customize diagram appearance, layout, and styling</li> <li>Security: Code scanning to ensure secure diagram generation</li> </ol>"},{"location":"servers/aws-diagram-mcp-server/#quick-example","title":"Quick Example","text":"<pre><code>from diagrams import Diagram\nfrom diagrams.aws.compute import Lambda\nfrom diagrams.aws.database import DynamoDB\nfrom diagrams.aws.network import APIGateway\n\nwith Diagram(\"Serverless Application\", show=False):\n    api = APIGateway(\"API Gateway\")\n    function = Lambda(\"Function\")\n    database = DynamoDB(\"DynamoDB\")\n\n    api &gt;&gt; function &gt;&gt; database\n</code></pre>"},{"location":"servers/aws-diagram-mcp-server/#development","title":"Development","text":""},{"location":"servers/aws-diagram-mcp-server/#testing","title":"Testing","text":"<p>The project includes a comprehensive test suite to ensure the functionality of the MCP server. The tests are organized by module and cover all aspects of the server's functionality.</p> <p>To run the tests, use the provided script:</p> <pre><code>./run_tests.sh\n</code></pre> <p>This script will automatically install pytest and its dependencies if they're not already installed.</p> <p>Or run pytest directly (if you have pytest installed):</p> <pre><code>pytest -xvs tests/\n</code></pre> <p>To run with coverage:</p> <pre><code>pytest --cov=awslabs.aws_diagram_mcp_server --cov-report=term-missing tests/\n</code></pre> <p>For more information about the tests, see the tests README.</p>"},{"location":"servers/aws-diagram-mcp-server/#development-dependencies","title":"Development Dependencies","text":"<p>To set up the development environment, install the development dependencies:</p> <pre><code>uv pip install -e \".[dev]\"\n</code></pre> <p>This will install the required dependencies for development, including pytest, pytest-asyncio, and pytest-cov.</p>"},{"location":"servers/aws-documentation-mcp-server/","title":"AWS Documentation MCP Server","text":"<p>Model Context Protocol (MCP) server for AWS Documentation</p> <p>This MCP server provides tools to access AWS documentation, search for content, and get recommendations.</p>"},{"location":"servers/aws-documentation-mcp-server/#features","title":"Features","text":"<ul> <li>Read Documentation: Fetch and convert AWS documentation pages to markdown format</li> <li>Search Documentation: Search AWS documentation using the official search API</li> <li>Recommendations: Get content recommendations for AWS documentation pages</li> </ul>"},{"location":"servers/aws-documentation-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/aws-documentation-mcp-server/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python 3.10 or newer using <code>uv python install 3.10</code> (or a more recent version)</li> </ol>"},{"location":"servers/aws-documentation-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, ~/.aws/amazonq/mcp.json):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.aws-documentation-mcp-server\": {\n        \"command\": \"uvx\",\n        \"args\": [\"awslabs.aws-documentation-mcp-server@latest\"],\n        \"env\": {\n          \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/aws-documentation-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.aws-documentation-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/aws-documentation-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#basic-usage","title":"Basic Usage","text":"<p>Example:  - \"look up documentation on S3 bucket naming rule. cite your sources\"  - \"recommend content for page https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\"</p> <p></p>"},{"location":"servers/aws-documentation-mcp-server/#tools","title":"Tools","text":""},{"location":"servers/aws-documentation-mcp-server/#read_documentation","title":"read_documentation","text":"<p>Fetches an AWS documentation page and converts it to markdown format.</p> <pre><code>read_documentation(url: str) -&gt; str\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#search_documentation","title":"search_documentation","text":"<p>Searches AWS documentation using the official AWS Documentation Search API.</p> <pre><code>search_documentation(search_phrase: str, limit: int) -&gt; list[dict]\n</code></pre>"},{"location":"servers/aws-documentation-mcp-server/#recommend","title":"recommend","text":"<p>Gets content recommendations for an AWS documentation page.</p> <pre><code>recommend(url: str) -&gt; list[dict]\n</code></pre>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/","title":"Amazon Bedrock Knowledge Base Retrieval MCP Server","text":"<p>MCP server for accessing Amazon Bedrock Knowledge Bases</p>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#features","title":"Features","text":""},{"location":"servers/bedrock-kb-retrieval-mcp-server/#discover-knowledge-bases-and-their-data-sources","title":"Discover knowledge bases and their data sources","text":"<ul> <li>Find and explore all available knowledge bases</li> <li>Search for knowledge bases by name or tag</li> <li>List data sources associated with each knowledge base</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#query-knowledge-bases-with-natural-language","title":"Query knowledge bases with natural language","text":"<ul> <li>Retrieve information using conversational queries</li> <li>Get relevant passages from your knowledge bases</li> <li>Access citation information for all results</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#filter-results-by-data-source","title":"Filter results by data source","text":"<ul> <li>Focus your queries on specific data sources</li> <li>Include or exclude specific data sources</li> <li>Prioritize results from specific data sources</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#rerank-results","title":"Rerank results","text":"<ul> <li>Improve relevance of retrieval results</li> <li>Use Amazon Bedrock reranking capabilities</li> <li>Sort results by relevance to your query</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#prerequisites","title":"Prerequisites","text":""},{"location":"servers/bedrock-kb-retrieval-mcp-server/#installation-requirements","title":"Installation Requirements","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> </ol>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#aws-requirements","title":"AWS Requirements","text":"<ol> <li>AWS CLI Configuration: You must have the AWS CLI configured with credentials and an AWS_PROFILE that has access to Amazon Bedrock and Knowledge Bases</li> <li>Amazon Bedrock Knowledge Base: You must have at least one Amazon Bedrock Knowledge Base with the tag key <code>mcp-multirag-kb</code> with a value of <code>true</code></li> <li>IAM Permissions: Your IAM role/user must have appropriate permissions to:</li> <li>List and describe knowledge bases</li> <li>Access data sources</li> <li>Query knowledge bases</li> </ol>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#reranking-requirements","title":"Reranking Requirements","text":"<p>If you intend to use reranking functionality, your Bedrock Knowledge Base needs additional permissions:</p> <ol> <li>Your IAM role must have permissions for both <code>bedrock:Rerank</code> and <code>bedrock:InvokeModel</code> actions</li> <li>The Amazon Bedrock Knowledge Bases service role must also have these permissions</li> <li>Reranking is only available in specific regions. Please refer to the official documentation for an up to date list of supported regions.</li> <li>Enable model access for the available reranking models in the specified region.</li> </ol> <p>For detailed instructions on setting up knowledge bases, see:</p> <ul> <li>Create a knowledge base</li> <li>Managing permissions for Amazon Bedrock knowledge bases</li> <li>Permissions for reranking in Amazon Bedrock</li> </ul>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.bedrock-kb-retrieval-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.bedrock-kb-retrieval-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-profile-name\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"KB_INCLUSION_TAG_KEY: \"optional-tag-key-to-filter-kbs\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/bedrock-kb-retrieval-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.bedrock-kb-retrieval-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env\",\n          \"KB_INCLUSION_TAG_KEY=optional-tag-key-to-filter-kbs\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/bedrock-kb-retrieval-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/bedrock-kb-retrieval-mcp-server/#limitations","title":"Limitations","text":"<ul> <li>Results with <code>IMAGE</code> content type are not included in the KB query response.</li> <li>The <code>reranking</code> parameter requires additional permissions, Amazon Bedrock model access, and is only available in specific regions.</li> </ul>"},{"location":"servers/cdk-mcp-server/","title":"AWS CDK MCP Server","text":"<p>MCP server for AWS Cloud Development Kit (CDK) best practices, infrastructure as code patterns, and security compliance with CDK Nag.</p>"},{"location":"servers/cdk-mcp-server/#features","title":"Features","text":""},{"location":"servers/cdk-mcp-server/#cdk-general-guidance","title":"CDK General Guidance","text":"<ul> <li>Prescriptive patterns with AWS Solutions Constructs and GenAI CDK libraries</li> <li>Structured decision flow for choosing appropriate implementation approaches</li> <li>Security automation through CDK Nag integration and Lambda Powertools</li> </ul>"},{"location":"servers/cdk-mcp-server/#cdk-nag-integration","title":"CDK Nag Integration","text":"<ul> <li>Work with CDK Nag rules for security and compliance</li> <li>Explain specific CDK Nag rules with AWS Well-Architected guidance</li> <li>Check if CDK code contains Nag suppressions that require human review</li> </ul>"},{"location":"servers/cdk-mcp-server/#aws-solutions-constructs","title":"AWS Solutions Constructs","text":"<ul> <li>Search and discover AWS Solutions Constructs patterns</li> <li>Find recommended patterns for common architecture needs</li> <li>Get detailed documentation on Solutions Constructs</li> </ul>"},{"location":"servers/cdk-mcp-server/#generative-ai-cdk-constructs","title":"Generative AI CDK Constructs","text":"<ul> <li>Search for GenAI CDK constructs by name or type</li> <li>Discover specialized constructs for AI/ML workloads</li> <li>Get implementation guidance for generative AI applications</li> </ul>"},{"location":"servers/cdk-mcp-server/#lambda-layer-documentation-provider","title":"Lambda Layer Documentation Provider","text":"<ul> <li>Access comprehensive documentation for AWS Lambda layers</li> <li>Get code examples for generic Lambda layers and Python-specific layers</li> <li>Retrieve directory structure information and implementation best practices</li> <li>Seamless integration with AWS Documentation MCP Server for detailed documentation</li> </ul>"},{"location":"servers/cdk-mcp-server/#amazon-bedrock-agent-schema-generation","title":"Amazon Bedrock Agent Schema Generation","text":"<ul> <li>Use this tool when creating Bedrock Agents with Action Groups that use Lambda functions</li> <li>Streamline the creation of Bedrock Agent schemas</li> <li>Convert code files to compatible OpenAPI specifications</li> </ul>"},{"location":"servers/cdk-mcp-server/#developer-notes","title":"Developer Notes","text":"<ul> <li>Requirements: Your Lambda function must use <code>BedrockAgentResolver</code> from AWS Lambda Powertools</li> <li>Lambda Dependencies: If schema generation fails, a fallback script will be generated. If you see error messages about missing dependencies, install them and then run the script again.</li> <li>Integration: Use the generated schema with <code>bedrock.ApiSchema.fromLocalAsset()</code> in your CDK code</li> </ul>"},{"location":"servers/cdk-mcp-server/#cdk-implementation-workflow","title":"CDK Implementation Workflow","text":"<p>This diagram provides a comprehensive view of the recommended CDK implementation workflow:</p> <pre><code>graph TD\n    Start([Start]) --&gt; A[\"CDKGeneralGuidance\"]\n    A --&gt; Init[\"cdk init app\"]\n\n    Init --&gt; B{Choose Approach}\n    B --&gt;|\"Common Patterns\"| C1[\"GetAwsSolutionsConstructPattern\"]\n    B --&gt;|\"GenAI Features\"| C2[\"SearchGenAICDKConstructs\"]\n    B --&gt;|\"Custom Needs\"| C3[\"Custom CDK Code\"]\n\n    C1 --&gt; D1[\"Implement Solutions Construct\"]\n    C2 --&gt; D2[\"Implement GenAI Constructs\"]\n    C3 --&gt; D3[\"Implement Custom Resources\"]\n\n    %% Bedrock Agent with Action Groups specific flow\n    D2 --&gt;|\"For Bedrock Agents&lt;br/&gt;with Action Groups\"| BA[\"Create Lambda with&lt;br/&gt;BedrockAgentResolver\"]\n\n    %% Schema generation flow\n    BA --&gt; BS[\"GenerateBedrockAgentSchema\"]\n    BS --&gt;|\"Success\"| JSON[\"openapi.json created\"]\n    BS --&gt;|\"Import Errors\"| BSF[\"Tool generates&lt;br/&gt;generate_schema.py\"]\n    BSF --&gt;|\"Missing dependencies?\"| InstallDeps[\"Install dependencies\"]\n    InstallDeps --&gt; BSR[\"Run script manually:&lt;br/&gt;python generate_schema.py\"]\n    BSR --&gt; JSON[\"openapi.json created\"]\n\n    %% Use schema in Agent CDK\n    JSON --&gt; AgentCDK[\"Use schema in&lt;br/&gt;Agent CDK code\"]\n    AgentCDK --&gt; D2\n\n    %% Conditional Lambda Powertools implementation\n    D1 &amp; D2 &amp; D3 --&gt; HasLambda{\"Using Lambda&lt;br/&gt;Functions?\"}\n    HasLambda --&gt; UseLayer{\"Using Lambda&lt;br/&gt;Layers?\"}\n    UseLayer --&gt;|\"Yes\"| LLDP[\"LambdaLayerDocumentationProvider\"]\n\n    HasLambda --&gt;|\"No\"| SkipL[\"Skip\"]\n\n    %% Rest of workflow\n    LLDP[\"LambdaLayerDocumentationProvider\"] --&gt; Synth[\"cdk synth\"]\n    SkipL --&gt; Synth\n\n    Synth --&gt; Nag{\"CDK Nag&lt;br/&gt;warnings?\"}\n    Nag --&gt;|Yes| E[\"ExplainCDKNagRule\"]\n    Nag --&gt;|No| Deploy[\"cdk deploy\"]\n\n    E --&gt; Fix[\"Fix or Add Suppressions\"]\n    Fix --&gt; CN[\"CheckCDKNagSuppressions\"]\n    CN --&gt; Synth\n\n    %% Styling with darker colors\n    classDef default fill:#424242,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef cmd fill:#4a148c,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef tool fill:#01579b,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef note fill:#1b5e20,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef output fill:#006064,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n    classDef decision fill:#5d4037,stroke:#ffffff,stroke-width:1px,color:#ffffff;\n\n    class Init,Synth,Deploy,BSR cmd;\n    class A,C1,C2,BS,E,CN,LLDP tool;\n    class JSON output;\n    class HasLambda,UseLayer,Nag decision;</code></pre>"},{"location":"servers/cdk-mcp-server/#available-mcp-tools","title":"Available MCP Tools","text":"<ul> <li>CDKGeneralGuidance: Get prescriptive advice for building AWS applications with CDK</li> <li>GetAwsSolutionsConstructPattern: Find vetted architecture patterns combining AWS services</li> <li>SearchGenAICDKConstructs: Discover GenAI CDK constructs by name or features</li> <li>GenerateBedrockAgentSchema: Create OpenAPI schemas for Bedrock Agent action groups</li> <li>LambdaLayerDocumentationProvider: Access documentation for Lambda layers implementation</li> <li>ExplainCDKNagRule: Get detailed guidance on CDK Nag security rules</li> <li>CheckCDKNagSuppressions: Validate CDK Nag suppressions in your code</li> </ul>"},{"location":"servers/cdk-mcp-server/#available-mcp-resources","title":"Available MCP Resources","text":"<ul> <li>CDK Nag Rules: Access rule packs via <code>cdk-nag://rules/{rule_pack}</code></li> <li>AWS Solutions Constructs: Access patterns via <code>aws-solutions-constructs://{pattern_name}</code></li> <li>GenAI CDK Constructs: Access documentation via <code>genai-cdk-constructs://{construct_type}/{construct_name}</code></li> <li>Lambda Powertools: Get guidance on Lambda Powertools via <code>lambda-powertools://{topic}</code></li> </ul>"},{"location":"servers/cdk-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install AWS CDK CLI using <code>npm install -g aws-cdk</code> (Note: The MCP server itself doesn't use the CDK CLI directly, but it guides users through CDK application development that requires the CLI)</li> </ol>"},{"location":"servers/cdk-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.cdk-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.cdk-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/cdk-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.cdk-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/cdk-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/cdk-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider:</p> <ul> <li>Reviewing all CDK Nag warnings and errors manually</li> <li>Fixing security issues rather than suppressing them whenever possible</li> <li>Documenting clear justifications for any necessary suppressions</li> <li>Using the CheckCDKNagSuppressions tool to verify no unauthorized suppressions exist</li> </ul> <p>Before applying CDK NAG Suppressions, you should consider conducting your own independent assessment to ensure that your use would comply with your own specific security and quality control practices and standards, as well as the local laws, rules, and regulations that govern you and your content.</p>"},{"location":"servers/core-mcp-server/","title":"Core MCP Server","text":"<p>MCP server that provides a starting point for using the following awslabs MCP servers - awslabs.cdk-mcp-server - awslabs.bedrock-kb-retrieval-mcp-server - awslabs.nova-canvas-mcp-server - awslabs.cost-analysis-mcp-server - awslabs.aws-documentation-mcp-server - awslabs.aws-diagram-mcp-server</p>"},{"location":"servers/core-mcp-server/#features","title":"Features","text":""},{"location":"servers/core-mcp-server/#planning-and-orchestration","title":"Planning and orchestration","text":"<ul> <li>Provides tool for prompt understanding and translation to AWS services</li> </ul>"},{"location":"servers/core-mcp-server/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12 or higher</li> <li>uv - Fast Python package installer and resolver</li> <li>AWS credentials configured with Bedrock access</li> <li>Node.js (for UVX installation support)</li> </ul>"},{"location":"servers/core-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.core-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"awslabs.core-mcp-server@latest\"\n      ],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"autoApprove\": [],\n      \"disabled\": false\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/core-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.core-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/core-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/core-mcp-server/#tools-and-resources","title":"Tools and Resources","text":"<p>The server exposes the following tools through the MCP interface:</p> <ul> <li><code>prompt_understanding</code> - Helps to provide guidance and planning support when building AWS Solutions for the given prompt</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/","title":"Cost Analysis MCP Server","text":"<p>MCP server for analyzing AWS service costs and generating cost reports</p>"},{"location":"servers/cost-analysis-mcp-server/#features","title":"Features","text":""},{"location":"servers/cost-analysis-mcp-server/#analyze-and-visualize-aws-costs","title":"Analyze and visualize AWS costs","text":"<ul> <li>Get detailed breakdown of your AWS costs by service, region and tier</li> <li>Understand how costs are distributed across various services</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#query-cost-data-with-natural-language","title":"Query cost data with natural language","text":"<ul> <li>Ask questions about your AWS costs in plain English, no complex query languages required</li> <li>Get instant answers fetched from pricing webpage and AWS Pricing API, for questions related to AWS services</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#generate-cost-reports-and-insights","title":"Generate cost reports and insights","text":"<ul> <li>Generate comprehensive cost reports based on your IaC implementation</li> <li>Get cost optimization recommendations</li> </ul>"},{"location":"servers/cost-analysis-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Set up AWS credentials with access to AWS services</li> <li>You need an AWS account with appropriate permissions</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> <li>Ensure your IAM role/user has permissions to access AWS Pricing API</li> </ol>"},{"location":"servers/cost-analysis-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.cost-analysis-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.cost-analysis-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\",\n        \"AWS_PROFILE\": \"your-aws-profile\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/bedrock-kb-retrieval-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.cost-analysis-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/cost-analysis-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/cost-analysis-mcp-server/#aws-authentication","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\"\n}\n</code></pre> <p>Make sure the AWS profile has permissions to access the AWS Pricing API. The MCP server creates a boto3 session using the specified profile to authenticate with AWS services. Your AWS IAM credentials remain on your local machine and are strictly used for accessing AWS services.</p>"},{"location":"servers/lambda-mcp-server/","title":"AWS Lambda MCP Server","text":"<p>A Model Context Protocol (MCP) server for AWS Lambda to select and run Lambda function as MCP tools without code changes.</p>"},{"location":"servers/lambda-mcp-server/#features","title":"Features","text":"<p>This MCP server acts as a bridge between MCP clients and AWS Lambda functions, allowing generative AI models to access and run Lambda functions as tools. This is useful, for example, to access private resources such as internal applications and databases without the need to provide public network access. This approach allows the model to use other AWS services, private networks, and the public internet.</p> <pre><code>graph LR\n    A[Model] &lt;--&gt; B[MCP Client]\n    B &lt;--&gt; C[\"MCP2Lambda&lt;br&gt;(MCP Server)\"]\n    C &lt;--&gt; D[Lambda Function]\n    D &lt;--&gt; E[Other AWS Services]\n    D &lt;--&gt; F[Internet]\n    D &lt;--&gt; G[VPC]\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#bfb,stroke:#333,stroke-width:4px\n    style D fill:#fbb,stroke:#333,stroke-width:2px\n    style E fill:#fbf,stroke:#333,stroke-width:2px\n    style F fill:#dff,stroke:#333,stroke-width:2px\n    style G fill:#ffd,stroke:#333,stroke-width:2px</code></pre> <p>From a security perspective, this approach implements segregation of duties by allowing the model to invoke the Lambda functions but not to access the other AWS services directly. The client only needs AWS credentials to invoke the Lambda functions. The Lambda functions can then interact with other AWS services (using the function role) and access public or private networks.</p>"},{"location":"servers/lambda-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> </ol>"},{"location":"servers/lambda-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.lambda-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.lambda-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FUNCTION_PREFIX\": \"your-function-prefix\",\n        \"FUNCTION_LIST\": \"your-first-function, your-second-function\",\n        \"FUNCTION_TAG_KEY\": \"your-tag-key\",\n        \"FUNCTION_TAG_VALUE\": \"your-tag-value\"\n      }\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/bedrock-kb-retrieval-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.lambda-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env\",\n          \"FUNCTION_PREFIX=your-function-prefix\",\n          \"--env\",\n          \"FUNCTION_LIST=your-first-function,your-second-function\",\n          \"--env\",\n          \"FUNCTION_TAG_KEY=your-tag-key\",\n          \"--env\",\n          \"FUNCTION_TAG_VALUE=your-tag-value\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/lambda-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p> <p>The <code>AWS_PROFILE</code> and the <code>AWS_REGION</code> are optional, their defualt values are <code>default</code> and <code>us-east-1</code>.</p> <p>You can specify <code>FUNCTION_PREFIX</code>, <code>FUNCTION_LIST</code>, or both. If both are empty, all functions pass the name check. After the name check, if both <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code> are set, functions are further filtered by tag (with key=value). If only one of <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code>, then no function is selected and a warning is displayed.</p> <p>IMPORTANT: The function name is used as MCP tool name. The function description in AWS Lambda is used as MCP tool description. The function description should clarify when to use the function (what it provides) and how (which parameters). For example, a function that gives access to an internal Customer Relationship Management (CRM) system can use this description:</p> <pre><code>Retrieve customer status on the CRM system based on { 'customerId' } or { 'customerEmail' }\n</code></pre> <p>Sample functions that can be deployed via AWS SAM are provided in the <code>examples</code> folder.</p>"},{"location":"servers/lambda-mcp-server/#best-practices","title":"Best practices","text":"<ul> <li>Use the <code>FUNCTION_LIST</code> to specify the functions that are available as MCP tools.</li> <li>Use the <code>FUNCTION_PREFIX</code> to specify the prefix of the functions that are available as MCP tools.</li> <li>Use the <code>FUNCTION_TAG_KEY</code> and <code>FUNCTION_TAG_VALUE</code> to specify the tag key and value of the functions that are available as MCP tools.</li> <li>AWS Lambda <code>Description</code> property: the description of the function is used as MCP tool description, so it should be very detailed to help the model understand when and how to use the function and with with which parameters.</li> </ul>"},{"location":"servers/lambda-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider:</p> <ul> <li>Only Lambda functions that are in the provided list or with a name starting with the prefix are imported as MCP tools.</li> <li>The MCP server needs permissions to invoke the Lambda functions.</li> <li>Each Lambda function has its own permissions to optionally access other AWS resources.</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/","title":"Amazon Nova Canvas MCP Server","text":"<p>MCP server for generating images using Amazon Nova Canvas</p>"},{"location":"servers/nova-canvas-mcp-server/#features","title":"Features","text":""},{"location":"servers/nova-canvas-mcp-server/#text-based-image-generation","title":"Text-based image generation","text":"<ul> <li>Create images from text prompts with <code>generate_image</code></li> <li>Customizable dimensions (320-4096px), quality options, and negative prompting</li> <li>Supports multiple image generation (1-5) in single request</li> <li>Adjustable parameters like cfg_scale (1.1-10.0) and seeded generation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#color-guided-image-generation","title":"Color-guided image generation","text":"<ul> <li>Generate images with specific color palettes using <code>generate_image_with_colors</code></li> <li>Define up to 10 hex color values to influence the image style and mood</li> <li>Same customization options as text-based generation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#workspace-integration","title":"Workspace integration","text":"<ul> <li>Images saved to user-specified workspace directories with automatic folder creation</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#aws-authentication","title":"AWS authentication","text":"<ul> <li>Uses AWS profiles for secure access to Amazon Nova Canvas services</li> </ul>"},{"location":"servers/nova-canvas-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Set up AWS credentials with access to Amazon Bedrock and Nova Canvas</li> <li>You need an AWS account with Amazon Bedrock and Amazon Nova Canvas enabled</li> <li>Configure AWS credentials with <code>aws configure</code> or environment variables</li> <li>Ensure your IAM role/user has permissions to use Amazon Bedrock and Nova Canvas</li> </ol>"},{"location":"servers/nova-canvas-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.nova-canvas-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.nova-canvas-mcp-server@latest\"],\n      \"env\": {\n        \"AWS_PROFILE\": \"your-aws-profile\",\n        \"AWS_REGION\": \"us-east-1\",\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/nova-canvas-mcp-server .</code>:</p> <pre><code># ficticious `.env` file with AWS temporary credentials\nAWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk\n</code></pre> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.nova-canvas-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"AWS_REGION=us-east-1\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"--env-file\",\n          \"/full/path/to/file/above/.env\",\n          \"awslabs/nova-canvas-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre> <p>NOTE: Your credentials will need to be kept refreshed from your host</p>"},{"location":"servers/nova-canvas-mcp-server/#installing-via-smithery","title":"Installing via Smithery","text":"<p>To install Amazon Nova Canvas MCP Server for Claude Desktop automatically via Smithery:</p> <pre><code>npx -y @smithery/cli install @awslabs/nova-canvas-mcp-server --client claude\n</code></pre>"},{"location":"servers/nova-canvas-mcp-server/#aws-authentication_1","title":"AWS Authentication","text":"<p>The MCP server uses the AWS profile specified in the <code>AWS_PROFILE</code> environment variable. If not provided, it defaults to the \"default\" profile in your AWS configuration file.</p> <pre><code>\"env\": {\n  \"AWS_PROFILE\": \"your-aws-profile\",\n  \"AWS_REGION\": \"us-east-1\"\n}\n</code></pre> <p>Make sure the AWS profile has permissions to access Amazon Bedrock and Amazon Nova Canvas. The MCP server creates a boto3 session using the specified profile to authenticate with AWS services. Your AWS IAM credentials remain on your local machine and are strictly used for using the Amazon Bedrock model APIs.</p>"},{"location":"servers/terraform-mcp-server/","title":"AWS Terraform MCP Server","text":"<p>MCP server for Terraform on AWS best practices, infrastructure as code patterns, and security compliance with Checkov.</p>"},{"location":"servers/terraform-mcp-server/#features","title":"Features","text":"<ul> <li>Terraform Best Practices - Get prescriptive Terraform advice for building applications on AWS</li> <li>AWS Well-Architected guidance for Terraform configurations</li> <li>Security and compliance recommendations</li> <li> <p>AWSCC provider prioritization for consistent API behavior</p> </li> <li> <p>Security-First Development Workflow - Follow a structured process for creating secure code</p> </li> <li>Step-by-step guidance for validation and security scanning</li> <li>Integration of Checkov at the right stages of development</li> <li> <p>Clear handoff points between AI assistance and developer deployment</p> </li> <li> <p>Checkov Integration - Work with Checkov for security and compliance scanning</p> </li> <li>Run security scans on Terraform code to identify vulnerabilities</li> <li>Automatically fix identified security issues when possible</li> <li> <p>Get detailed remediation guidance for compliance issues</p> </li> <li> <p>AWS Provider Documentation - Search for AWS and AWSCC provider resources</p> </li> <li>Find documentation for specific resources and attributes</li> <li>Get example snippets and implementation guidance</li> <li> <p>Compare AWS and AWSCC provider capabilities</p> </li> <li> <p>AWS-IA GenAI Modules - Access specialized modules for AI/ML workloads</p> </li> <li>Amazon Bedrock module for generative AI applications</li> <li>OpenSearch Serverless for vector search capabilities</li> <li>SageMaker endpoint deployment for ML model hosting</li> <li> <p>Serverless Streamlit application deployment for AI interfaces</p> </li> <li> <p>Terraform Registry Module Analysis - Analyze Terraform Registry modules</p> </li> <li>Search for modules by URL or identifier</li> <li>Extract input variables, output variables, and README content</li> <li>Understand module usage and configuration options</li> <li> <p>Analyze module structure and dependencies</p> </li> <li> <p>Terraform Workflow Execution - Run Terraform commands directly</p> </li> <li>Initialize, plan, validate, apply, and destroy operations</li> <li>Pass variables and specify AWS regions</li> <li>Get formatted command output for analysis</li> </ul>"},{"location":"servers/terraform-mcp-server/#tools-and-resources","title":"Tools and Resources","text":"<ul> <li>Terraform Development Workflow: Follow security-focused development process via <code>terraform://workflow_guide</code></li> <li>AWS Best Practices: Access AWS-specific guidance via <code>terraform://aws_best_practices</code></li> <li>AWS Provider Resources: Access resource listings via <code>terraform://aws_provider_resources_listing</code></li> <li>AWSCC Provider Resources: Access resource listings via <code>terraform://awscc_provider_resources_listing</code></li> </ul>"},{"location":"servers/terraform-mcp-server/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install <code>uv</code> from Astral or the GitHub README</li> <li>Install Python using <code>uv python install 3.10</code></li> <li>Install Terraform CLI for workflow execution</li> <li>Install Checkov for security scanning</li> </ol>"},{"location":"servers/terraform-mcp-server/#installation","title":"Installation","text":"<p>Here are some ways you can work with MCP across AWS, and we'll be adding support to more products including Amazon Q Developer CLI soon: (e.g. for Amazon Q Developer CLI MCP, <code>~/.aws/amazonq/mcp.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"awslabs.terraform-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\"awslabs.terraform-mcp-server@latest\"],\n      \"env\": {\n        \"FASTMCP_LOG_LEVEL\": \"ERROR\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n</code></pre> <p>or docker after a succesful <code>docker build -t awslabs/terraform-mcp-server .</code>:</p> <pre><code>  {\n    \"mcpServers\": {\n      \"awslabs.terraform-mcp-server\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"--interactive\",\n          \"--env\",\n          \"FASTMCP_LOG_LEVEL=ERROR\",\n          \"awslabs/terraform-mcp-server:latest\"\n        ],\n        \"env\": {},\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n</code></pre>"},{"location":"servers/terraform-mcp-server/#security-considerations","title":"Security Considerations","text":"<p>When using this MCP server, you should consider: - Following the structured development workflow that integrates validation and security scanning - Reviewing all Checkov warnings and errors manually - Fixing security issues rather than ignoring them whenever possible - Documenting clear justifications for any necessary exceptions - Using the RunCheckovScan tool regularly to verify security compliance - Preferring the AWSCC provider for its consistent API behavior and better security defaults</p> <p>Before applying Terraform changes to production environments, you should conduct your own independent assessment to ensure that your infrastructure would comply with your own specific security and quality control practices and standards, as well as the local laws, rules, and regulations that govern you and your content.</p>"}]}